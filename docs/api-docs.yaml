openapi: 3.0.0
servers:
  - description: Server which host the API
    url: https://congresotryit.es
info:
  description: Official API for the Try IT! congress
  version: "1.0"
  title: Try IT! API
  contact:
    email: maximo.garcia.martinez@alumnos.upm.es
  license:
    name: Apache 2.0
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
tags:
  - name: Home
    description: Basic information which will be used in the home screen.
  - name: Events
    description: Information about the past editions of the congress.
  - name: Tickets
    description: Page with a form that allow users to generate tickets.
  - name: Volunteers
    description: Page with a form that allow users with tickets to be part of the staff of the congress.
  - name: Escape-room
    description: Page with a form that allow users to join one of the session of the escape room.
  - name: ECTS
    description: Page with a form that allow users to check how many ECTS they will earn.
paths:
  /sponsors:
    get:
      tags:
        - Home
      summary: Returns a JSON object with all the sponsors for the last edition
      operationId: getSponsors
      description: |
        Returns the information of all the sponsors in the current edition. Sponsors will be classify by type of sponsorship.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SponsorsResource"
  /streaming:
    get:
      tags:
        - Home
      summary: Returns a JSON object with the streaming information
      operationId: getStreaming
      description: |
        Returns the information about the streaming status and if the congress is on live, reply with the url
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StreamingResource"

  /events:
    get:
      tags:
        - Events
      summary: Returns a JSON object with all the talks and workshops
      operationId: getTalks
      description: |
        Returns the information of the talks and the workshops of the last editions or all of the editions. If a edition is not specified, it will return the current edition by default.
      parameters:
        - in: query
          name: edition
          description: Allow to specify if the response should have the information of the current edition or the information of all of the editions. It should contain "all" or "current".
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK - Response using edition="current" or empty edition parameter
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EditionResource"

  /events?edition=all:
    get:
      tags:
        - Events
      summary: Returns a JSON object with all the talks and workshops
      operationId: getAllTalks
      description: |
        Returns the information of the talks and the workshops of the last editions or all of the editions. If a edition is not specified, it will return the current edition by default.
      parameters:
        - in: query
          name: edition
          description: Allow to specify if the response should have the information of the current edition or the information of all of the editions. It should contain "all" or "current".
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK - Response using edition="all"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EditionsResource"

  /tickets:
    post:
      tags:
        - Tickets
      summary: Creates a new ticket
      operationId: postTicket
      description: |
        Sends the information of the form filled by the user to the server in order to create a new ticket and send him the email with the ticket
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TicketResource"

  /volunteers:
    post:
      tags:
        - Volunteers
      summary: Creates a new volunteer
      operationId: postVolunteer
      description: |
        Sends the information of the form filled by the user to the server in order to create a new volunteer in the database. The user must have a ticket first. The backend will use personal id to make a relation between ticket and volunteer.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VolunteerResource"
        "400":
          description: The user must create a ticket first
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidTicketResource"

  /escape-room:
    get:
      tags:
        - Escape-room
      summary: Returns the list of available sessions for participate
      operationId: getEscapeRoom
      description: |
        Returns a list with all the slots available and the number of people already registered so, the user can see how much room left it has.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EscapeRoomGetResource"
    post:
      tags:
        - Escape-room
      summary: Register a user to one of the sessions for the Escape Room
      operationId: postEscapeRoom
      description: |
        Sends the information of the user which want to join one of the sessions
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EscapeRoomPostResource"
        "400":
          description: The user must create a ticket first
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidTicketResource"

  /ects:
    post:
      tags:
        - ECTS
      summary: Check the number of ECTS earned in all the editions of the congress.
      operationId: getECTS
      description: |
        The student can check the number of ECTS earned in all the editions of the congress. At maximum of 2ECTS.
      parameters:
        - in: query
          name: edition
          description: Edition which user wants to know how many ECTS he/she earned
          required: true
          schema:
            type: string
        - in: query
          name: personal_id
          description: Personal ID used by the user when the ticket was created
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ECTSResource"

components:
  schemas:
    # TICKET
    TicketResource:
      type: object
      required:
        - name
        - lastname
        - personal_id
        - email
        - is_student
        - phone
      properties:
        name:
          type: string
          example: Iron
        lastname:
          type: string
          example: Man The Best
        personal_id:
          type: string
          pattern: "[/^[0-9]{8}[TRWAGMYFPDXBNJZSQVHLCKET]{1}$/|/^[XYZ]{1}[0-9]{7}[TRWAGMYFPDXBNJZSQVHLCKET]{1}$/|/^[A-Z0-9<]{9}[0-9]{1}[A-Z]{3}[0-9]{7}[A-Z]{1}[0-9]{7}[A-Z0-9<]{14}[0-9]{2}$/]"
          example: 00112233K
        email:
          type: string
          format: email
          example: contact@ironman.com
        is_student:
          type: boolean
          example: true
        is_upm_student:
          type: boolean
          example: true
        upm_school:
          type: string
          example: ETSIINF
        degree:
          type: string
          example: Engineering of how to build an Iron Man suit
        year:
          type: integer
          minimum: 1
          maximum: 4
          example: 2
        phone:
          type: string
          example: "957762888"
    # END TICKET

    InvalidTicketResource:
      type: object
      required:
        - status
        - message
      properties:
        status:
          type: integer
          minimum: 400
          maximum: 400
          example: 400
        string:
          type: string
          example: The user must have a ticket for the current edition

    TimePeriodsResource:
      type: object
      required:
        - date
        - time_period
      properties:
        date:
          type: string
          format: date
          example: "2020-10-29T10:03:56.127Z"
        time_period:
          type: string
          example: Morning

    # VOLUNTEERS
    VolunteerResource:
      type: object
      required:
        - time_periods
        - personal_id
      properties:
        time_periods:
          type: array
          items:
            $ref: "#/components/schemas/TimePeriodsResource"
        personal_id:
          type: string
          pattern: "[/^[0-9]{8}[TRWAGMYFPDXBNJZSQVHLCKET]{1}$/|/^[XYZ]{1}[0-9]{7}[TRWAGMYFPDXBNJZSQVHLCKET]{1}$/|/^[A-Z0-9<]{9}[0-9]{1}[A-Z]{3}[0-9]{7}[A-Z]{1}[0-9]{7}[A-Z0-9<]{14}[0-9]{2}$/]"
          example: Man The Best
    # END VOLUNTEERS

    # ESCAPE ROOM
    EscapeRoomGetResource:
      type: array
      items:
        type: object
        required:
          - date
          - n_registered
        properties:
          date:
            type: string
            format: date
            example: "2020-10-29T10:03:56.127Z"
          n_registered:
            type: integer
            minimum: 0
            example: 2

    EscapeRoomPostResource:
      type: object
      required:
        - time_period
        - personal_id
      properties:
        time_period:
          $ref: "#/components/schemas/TimePeriodsResource"
        personal_id:
          type: string
          pattern: "[/^[0-9]{8}[TRWAGMYFPDXBNJZSQVHLCKET]{1}$/|/^[XYZ]{1}[0-9]{7}[TRWAGMYFPDXBNJZSQVHLCKET]{1}$/|/^[A-Z0-9<]{9}[0-9]{1}[A-Z]{3}[0-9]{7}[A-Z]{1}[0-9]{7}[A-Z0-9<]{14}[0-9]{2}$/]"
          example: Man The Best
    # END ESCAPE ROOM

    StreamingResource:
      type: object
      required:
        - title
        - url
        - streaming
      properties:
        talk:
          $ref: "#/components/schemas/TalkResource"
        url:
          type: string
          pattern: http[s]?:\/\/(?:[a-zA-Z]|[0-9]|[\/.?&+!*=\-])+(?![^,!;:\s)])
          format: url
          example: "https://www.ted.com/talks/captain_america_TED_talk"
        streaming:
          type: boolean
          example: True

    # EVENTS
    # SPEAKER
    SpeakerResource:
      type: object
      required:
        - name
        - image
        - bio
        - company
      properties:
        name:
          type: string
          example: Victor Nieves
        bio:
          type: string
          example: No one knows where he was born
        image:
          type: string
          pattern: http[s]?:\/\/(?:[a-zA-Z]|[0-9]|[\/.?&+!*=\-])+(?![^,!;:\s)])
          format: url
          example: "https://www.images.com/victor"
        web:
          type: string
          pattern: http[s]?:\/\/(?:[a-zA-Z]|[0-9]|[\/.?&+!*=\-])+(?![^,!;:\s)])
          format: url
          example: "https://www.personalweb.com/"
        company:
          $ref: "#/components/schemas/CompanyResource"
        social_media:
          type: object
          properties:
            twitter:
              type: string
              pattern: http[s]?:\/\/(?:[a-zA-Z]|[0-9]|[\/.?&+!*=\-])+(?![^,!;:\s)])
              format: url
              example: "https://twitter.com/IronMan"
            facebook:
              type: string
              pattern: http[s]?:\/\/(?:[a-zA-Z]|[0-9]|[\/.?&+!*=\-])+(?![^,!;:\s)])
              format: url
              example: "https://facebook.com/IronMan"
            linkedin:
              type: string
              pattern: http[s]?:\/\/(?:[a-zA-Z]|[0-9]|[\/.?&+!*=\-])+(?![^,!;:\s)])
              format: url
              example: "https://linkedin.com/IronMan"
            google_plus:
              type: string
              pattern: http[s]?:\/\/(?:[a-zA-Z]|[0-9]|[\/.?&+!*=\-])+(?![^,!;:\s)])
              format: url
              example: "https://google_plus.com/IronMan"
            github:
              type: string
              pattern: http[s]?:\/\/(?:[a-zA-Z]|[0-9]|[\/.?&+!*=\-])+(?![^,!;:\s)])
              format: url
              example: "https://github.com/IronMan"
            gitlab:
              type: string
              pattern: http[s]?:\/\/(?:[a-zA-Z]|[0-9]|[\/.?&+!*=\-])+(?![^,!;:\s)])
              format: url
              example: "https://gitlab.com/IronMan"
    # END SPEAKER

    EditionsResource:
      type: array
      items:
        $ref: "#/components/schemas/EditionResource"

    EditionResource:
      type: object
      required:
        - events
        - year
      properties:
        year:
          type: integer
          example: 2020
        events:
          type: object
          required:
            - talks
            - workshops
          properties:
            talks:
              type: array
              items:
                $ref: "#/components/schemas/TalkResource"
            workshops:
              type: array
              items:
                $ref: "#/components/schemas/WorkshopResource"

    # TALKS
    TalkResource:
      type: object
      required:
        - title
        - description
        - url
        - video
        - date
        - slide
        - room
        - prize
        - speaker
      properties:
        title:
          type: string
          example: How to do IT stuff
        description:
          type: string
          example: Yes another talk about IT, amazing
        url:
          type: string
          format: url
          pattern: http[s]?:\/\/(?:[a-zA-Z]|[0-9]|[\/.?&+!*=\-])+(?![^,!;:\s)])
          example: "https://www.ted.com/talks/captain_america_TED_talk"
        video:
          type: string
          format: url
          pattern: http[s]?:\/\/(?:[a-zA-Z]|[0-9]|[\/.?&+!*=\-])+(?![^,!;:\s)])
          example: "https://www.youtube.com/watch?v=ANOTHERONE"
        date:
          type: object
          properties:
            start:
              type: string
              format: date
              example: "2018-10-29T10:03:56.127Z"
            end:
              type: string
              format: date
              example: "2018-10-29T12:00:56.127Z"
        slide:
          type: string # VERIFY
          format: url
          pattern: http[s]?:\/\/(?:[a-zA-Z]|[0-9]|[\/.?&+!*=\-])+(?![^,!;:\s)])
          example: "https://slide_url.com"
        room:
          type: string
          example: dark room
        prize:
          $ref: "#/components/schemas/PrizeResource"
        speaker:
          $ref: "#/components/schemas/SpeakerResource"
    # END TALKS

    # WORKSHOPS
    WorkshopResource:
      type: object
      required:
        - name
        - description
        - speaker
        - company
        - room
        - date
      properties:
        name:
          type: string
          example: How to program in 68k assembler
        description:
          type: string
          example: You will never approve computer architecture
        speaker:
          $ref: "#/components/schemas/SpeakerResource"
        company:
          $ref: "#/components/schemas/CompanyResource"
        room:
          type: string
          example: Wellington or Peralta
        date:
          type: string
          format: date
          example: "2018-10-29T10:03:56.127Z"
    # END WORKSHOPS

    CompanyResource:
      type: object
      required:
        - name
        - sponsor_type
        - logo
        - email
        - contact_phone # TO CHECK
      properties:
        name:
          type: string
          example: Some random IT company
        sponsor_type:
          type: string
          example: gold
        logo:
          type: string
          pattern: http[s]?:\/\/(?:[a-zA-Z]|[0-9]|[\/.?&+!*=\-])+(?![^,!;:\s)])
          format: url
          example: "https://www.images.com/mintu"
        email:
          type: string
          format: email
          pattern: "TODO"
          example: some_name@company.es
        contact_phone:
          type: string
          example: "957762888"
    #  END EVENTS

    # PRIZE
    PrizeResource:
      type: object
      required:
        - name
        - description
        - image
      properties:
        name:
          type: string
          example: Minttu
        description:
          type: string
          example: One full bottle of Minttu
        image:
          type: string
          pattern: http[s]?:\/\/(?:[a-zA-Z]|[0-9]|[\/.?&+!*=\-])+(?![^,!;:\s)])
          format: url
          example: "https://www.images.com/iron_man"
    # END PRIZE

    # SPONSORS
    SponsorsResource:
      type: object
      required:
        - category
        - sponsors
      properties:
        category:
          type: string
          pattern: "bronce | plata | oro | platino"
          example: oro
        sponsors:
          type: array
          items:
            $ref: "#/components/schemas/SponsorResource"

    SponsorResource:
      type: object
      required:
        - name
        - logo
      properties:
        name:
          type: string
          example: Avengers Endgame
        logo:
          type: string
          pattern: http[s]?:\/\/(?:[a-zA-Z]|[0-9]|[\/.?&+!*=\-])+(?![^,!;:\s)])
          format: url
          example: "https://www.images.com/iron_man"
    # END SPONSORS

    ECTSResource:
      type: object
      required:
        - edition
        - n_talks
        - talks_attended
      properties:
        edition:
          type: integer
          minimum: 1
          example: 2019
        n_talks:
          type: integer
          minimum: 1
          example: 27
        talks_attended:
          type: array
          items:
            $ref: "#/components/schemas/TalkResource"
