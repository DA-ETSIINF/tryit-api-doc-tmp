openapi: 3.0.0
# Added by API Auto Mocking Plugin
servers:
  - description: Server which host the API
    url: https://congresotryit.es
info:
  description: Official API for the Try IT! congress
  version: "1.0"
  title: Try IT! API
  contact:
    email: maximo.garcia.martinez@alumnos.upm.es
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: Home
    description: Basic information which will be shown in the home screen
  - name: Talks
    description: TODO
  - name: Workshops
    description: TODO
  - name: Previous-editions
    description: TODOs
  - name: Tickets
    description: TODOs
  - name: Volunteers
    description: TODOs
  - name: Escape-room
    description: TODOs
  - name: Check-for-ects
    description: TODOs
paths:
  /sponsors:
    get:
      tags:
        - Home
      summary: Returns a JSON object with all the sponsors for the last edition
      operationId: getSponsors
      description: |
        TODOs
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpeakerResource'
  /streaming:
    get:
      tags:
        - Home
      summary:  Returns a JSON object with the streaming information
      operationId: getStreaming
      description: |
        TODOs
      responses:
        '200':
          description: TODOs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StreamingResource'
  /talks:
    get:
      tags:
        - Talk
      summary: Returns a JSON object with the Talk Information
      operationId: getTalks
      description: |
        TODOs
      responses:
        '200':
          description: TODOs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TalkResource'
  /workshops:
    get:
      tags:
        - TODOs #TODOs
      summary: TODOs
      operationId: TODOs
      description: |
        TODOs
      responses:
        '200':
          description: TODOs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpeakerResource'
            application/xml:
              schema:
                $ref: '#/components/schemas/SpeakerResource'
  /previous-editions:
   # TODOs Check how to show it properly (inside /previous-editions)
    get:
      tags:
        - TODOs #TODOs
      summary: TODOs
      operationId: TODOs
      description: |
        TODOs
      responses:
        '200':
          description: TODOs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EditionsResource'

  /tickets:
    post:
      tags:
        - Tickets
      summary: Creates a new ticket
      operationId: postTicket
      description: |
        Sends the information of the form filled by the user to the server in order to create a new ticket and send him the email with the ticket
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketResource'
  /volunteers:
    post:
      tags:
        - Volunteers
      summary: Creates a new volunteer
      operationId: postVolunteer
      description: |
        Sends the information of the form filled by the user to the server in order to create a new volunteer in the database. The user must have a ticket first. The backend will use personal id to make a relation between ticket and volunteer.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpeakerResource'
        '400':
          description: The user must create a ticket first
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpeakerResource'
  /escape-room:
    post:
      tags:
        - TODOs #TODOs
      summary: TODOs
      operationId: TODOs
      description: |
        TODOs
      responses:
        '200':
          description: TODOs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpeakerResource'
        
  
        
components:
  schemas:
  # TODOs You have an example in the file I sent you via WhatsApp
    SpeakerResource:
      type: object
      required:
        - userId
        - name
        - username
        - email
        - createdAt
        - updatedAt
      properties:
        userId:
          type: integer
          format: id
          example: 92147
        username:
          type: string
          example: iron_man
        name:
          type: string
          example: Iron Man
        email:
          type: string
          format: email
          example: contact@ironman.com
        createdAt:
          type: string
          format: date-time
          example: '2016-08-29T09:12:33.001Z'
        updatedAt:
          type: string
          format: date-time
          example: '2018-10-29T10:03:56.127Z'
        biography:
          type: string
        location:
          type: string
          format: url
          example: 'https://api.faceSOS.com/user/92147'
        friendsLocation:
          type: string
          format: url
          example: 'https://api.faceSOS.com/user/92147/friends'
    TalkResource:
      type: object
    WorkshopResource:
      type: object
    CompanyResource:
      type: object
    PrizeResource:
      type: object
    TicketResource:
      type: object
      required:
        - name
        - lastnames
        - personal_id
        - email
        - is_student
        - phone
      properties:
        name:
          type: string
          example: Iron
        lastnames:
          type: string
          example: Man The Best
        personal_id:
          type: string
          pattern: '[/^[0-9]{8}[TRWAGMYFPDXBNJZSQVHLCKET]{1}$/|/^[XYZ]{1}[0-9]{7}[TRWAGMYFPDXBNJZSQVHLCKET]{1}$/|/^[A-Z0-9<]{9}[0-9]{1}[A-Z]{3}[0-9]{7}[A-Z]{1}[0-9]{7}[A-Z0-9<]{14}[0-9]{2}$/]'
          example: Man The Best
        email:
          type: string
          format: email
          example: contact@ironman.com
        is_student:
          type: boolean
          example: true
        is_upm_student:
          type: boolean
          example: true
        upm_school:
          type: string
          example: ETSIINF
        degree:
          type: string
          example: Engineering of how to build an Iron Man suit
        year:
          type: integer
          minimum: 1
          maximum: 4
          example: 2
        phone:
          type: string
          example: "957762888"

    StreamingResource:
      type: object
      required:
        - title
        - url
      properties:
        title: 
          type: string
          example: Captain America TED Talk
        url:
          type: string
          format: url
          example: 'https://www.ted.com/talks/captain_america_TED_talk' 
    
    TalkResource:
      type: object
      required:
      - title
      - description
      - url
      - video 
      - date
      - slide
      - room
      - prize
      - speaker
      properties:
      title:
        type: string
        example: How to do IT stuff
      description:
        type: string
        example: Yes another talk about IT, amazing
      url: 
        type: string
        format: url
        example: 'https://www.ted.com/talks/captain_america_TED_talk'
      video:
        type: string
        format: url
        example: 'https://www.youtube.com/watch?v=hHW1oY26kxQtalk'
      date:
        type: string
        format: date
        example: '2018-10-29T10:03:56.127Z'
      slide:
        type: string # VERIFY
        format: url
        example: 'https://slide_url'
      room:
        type: string
        example: dark room
      prize:
        type: string
        example: one bottle of minttu
      speaker:
        type: string
        example: Sweet Dady Victor Nieves <3

